
atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000aa0  00000b34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aa0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800104  00800104  00000b38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015b2  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c64  00000000  00000000  000022ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c48  00000000  00000000  00002f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  00003b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000587  00000000  00000000  00003f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be9  00000000  00000000  000044b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
   4:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_1>
   8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  48:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_18>
  4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  54:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_21>
  58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 40       	sbci	r16, 0x00	; 0
  6a:	7a 10       	cpse	r7, r10
  6c:	f3 5a       	subi	r31, 0xA3	; 163
  6e:	00 a0       	ldd	r0, Z+32	; 0x20
  70:	72 4e       	sbci	r23, 0xE2	; 226
  72:	18 09       	sbc	r17, r8
  74:	00 10       	cpse	r0, r0
  76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__stack+0xc3>
  78:	e8 00       	.word	0x00e8	; ????
  7a:	00 e8       	ldi	r16, 0x80	; 128
  7c:	76 48       	sbci	r23, 0x86	; 134
  7e:	17 00       	.word	0x0017	; ????
  80:	00 e4       	ldi	r16, 0x40	; 64
  82:	0b 54       	subi	r16, 0x4B	; 75
  84:	02 00       	.word	0x0002	; ????
  86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
  88:	9a 3b       	cpi	r25, 0xBA	; 186
  8a:	00 00       	nop
  8c:	00 e1       	ldi	r16, 0x10	; 16
  8e:	f5 05       	cpc	r31, r5
  90:	00 00       	nop
  92:	80 96       	adiw	r24, 0x20	; 32
  94:	98 00       	.word	0x0098	; ????
  96:	00 00       	nop
  98:	40 42       	sbci	r20, 0x20	; 32
  9a:	0f 00       	.word	0x000f	; ????
  9c:	00 00       	nop
  9e:	a0 86       	std	Z+8, r10	; 0x08
  a0:	01 00       	.word	0x0001	; ????
  a2:	00 00       	nop
  a4:	10 27       	eor	r17, r16
  a6:	00 00       	nop
  a8:	00 00       	nop
  aa:	e8 03       	fmulsu	r22, r16
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	64 00       	.word	0x0064	; ????
  b2:	00 00       	nop
  b4:	00 00       	nop
  b6:	0a 00       	.word	0x000a	; ????
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	01 00       	.word	0x0001	; ????
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	2c 76       	andi	r18, 0x6C	; 108
  c4:	d8 88       	ldd	r13, Y+16	; 0x10
  c6:	dc 67       	ori	r29, 0x7C	; 124
  c8:	4f 08       	sbc	r4, r15
  ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
  cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
  ce:	ae 59       	subi	r26, 0x9E	; 158
  d0:	e1 b1       	in	r30, 0x01	; 1
  d2:	b7 96       	adiw	r30, 0x27	; 39
  d4:	e5 e3       	ldi	r30, 0x35	; 53
  d6:	e4 53       	subi	r30, 0x34	; 52
  d8:	c6 3a       	cpi	r28, 0xA6	; 166
  da:	e6 51       	subi	r30, 0x16	; 22
  dc:	99 76       	andi	r25, 0x69	; 105
  de:	96 e8       	ldi	r25, 0x86	; 134
  e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <dtoa_prf+0xe4>
  e2:	84 26       	eor	r8, r20
  e4:	eb 89       	ldd	r30, Y+19	; 0x13
  e6:	8c 9b       	sbis	0x11, 4	; 17
  e8:	62 ed       	ldi	r22, 0xD2	; 210
  ea:	40 7c       	andi	r20, 0xC0	; 192
  ec:	6f fc       	.word	0xfc6f	; ????
  ee:	ef bc       	out	0x2f, r14	; 47
  f0:	9c 9f       	mul	r25, r28
  f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
  f4:	ba a5       	ldd	r27, Y+42	; 0x2a
  f6:	6f a5       	ldd	r22, Y+47	; 0x2f
  f8:	f4 90       	lpm	r15, Z
  fa:	05 5a       	subi	r16, 0xA5	; 165
  fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
  fe:	5c 93       	st	X, r21
 100:	6b 6c       	ori	r22, 0xCB	; 203
 102:	f9 67       	ori	r31, 0x79	; 121
 104:	6d c1       	rjmp	.+730    	; 0x3e0 <lcd_i2c_write_string+0x4>
 106:	1b fc       	.word	0xfc1b	; ????
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	0d 47       	sbci	r16, 0x7D	; 125
 10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
 10e:	20 e6       	ldi	r18, 0x60	; 96
 110:	b5 00       	.word	0x00b5	; ????
 112:	d0 ed       	ldi	r29, 0xD0	; 208
 114:	90 2e       	mov	r9, r16
 116:	03 00       	.word	0x0003	; ????
 118:	94 35       	cpi	r25, 0x54	; 84
 11a:	77 05       	cpc	r23, r7
 11c:	00 80       	ld	r0, Z
 11e:	84 1e       	adc	r8, r20
 120:	08 00       	.word	0x0008	; ????
 122:	00 20       	and	r0, r0
 124:	4e 0a       	sbc	r4, r30
 126:	00 00       	nop
 128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
 12a:	0c 33       	cpi	r16, 0x3C	; 60
 12c:	33 33       	cpi	r19, 0x33	; 51
 12e:	33 0f       	add	r19, r19
 130:	98 6e       	ori	r25, 0xE8	; 232
 132:	12 83       	std	Z+2, r17	; 0x02
 134:	11 41       	sbci	r17, 0x11	; 17
 136:	ef 8d       	ldd	r30, Y+31	; 0x1f
 138:	21 14       	cp	r2, r1
 13a:	89 3b       	cpi	r24, 0xB9	; 185
 13c:	e6 55       	subi	r30, 0x56	; 86
 13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
 140:	fe e6       	ldi	r31, 0x6E	; 110
 142:	db 18       	sub	r13, r11
 144:	d1 84       	ldd	r13, Z+9	; 0x09
 146:	4b 38       	cpi	r20, 0x8B	; 139
 148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
 14a:	7c 1d       	adc	r23, r12
 14c:	90 1d       	adc	r25, r0
 14e:	a4 bb       	out	0x14, r26	; 20
 150:	e4 24       	eor	r14, r4
 152:	20 32       	cpi	r18, 0x20	; 32
 154:	84 72       	andi	r24, 0x24	; 36
 156:	5e 22       	and	r5, r30
 158:	81 00       	.word	0x0081	; ????
 15a:	c9 f1       	breq	.+114    	; 0x1ce <__vector_21+0x2e>
 15c:	24 ec       	ldi	r18, 0xC4	; 196
 15e:	a1 e5       	ldi	r26, 0x51	; 81
 160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d8 e0       	ldi	r29, 0x08	; 8
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	e0 ea       	ldi	r30, 0xA0	; 160
 176:	fa e0       	ldi	r31, 0x0A	; 10
 178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
 17a:	05 90       	lpm	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	a4 30       	cpi	r26, 0x04	; 4
 180:	b1 07       	cpc	r27, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	a4 e0       	ldi	r26, 0x04	; 4
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
 18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
 18e:	a5 30       	cpi	r26, 0x05	; 5
 190:	b2 07       	cpc	r27, r18
 192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
 194:	0e 94 1a 02 	call	0x434	; 0x434 <main>
 198:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <_exit>

0000019c <__bad_interrupt>:
 19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <__vector_21>:
* USO DEL ADC CON INTERRUPCIONES
************************************************************************/

/***Rutina de atención a las interrupciones del convertidor***/
ISR (ADC_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	2a 97       	sbiw	r28, 0x0a	; 10
 1d0:	de bf       	out	0x3e, r29	; 62
 1d2:	cd bf       	out	0x3d, r28	; 61
	uint8_t LowPart = ADCL;	//10-bit resolution
 1d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	uint16_t TenBitResult = ADCH << 2 | LowPart >> 6; //10-bit resolution
 1d8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	22 0f       	add	r18, r18
 1e0:	33 1f       	adc	r19, r19
 1e2:	22 0f       	add	r18, r18
 1e4:	33 1f       	adc	r19, r19
 1e6:	82 95       	swap	r24
 1e8:	86 95       	lsr	r24
 1ea:	86 95       	lsr	r24
 1ec:	83 70       	andi	r24, 0x03	; 3
 1ee:	28 2b       	or	r18, r24
	
	/***Ejemplo de termómetro digital para salida en LCD***/
	char ascii_temp [10];
	float temp = (TenBitResult*150/307);//Conversión a grados C
 1f0:	46 e9       	ldi	r20, 0x96	; 150
 1f2:	42 9f       	mul	r20, r18
 1f4:	c0 01       	movw	r24, r0
 1f6:	43 9f       	mul	r20, r19
 1f8:	90 0d       	add	r25, r0
 1fa:	11 24       	eor	r1, r1
 1fc:	63 e3       	ldi	r22, 0x33	; 51
 1fe:	71 e0       	ldi	r23, 0x01	; 1
 200:	0e 94 b1 02 	call	0x562	; 0x562 <__udivmodhi4>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__floatunsisf>
	//El LM35 entrega 1.5v cuando mide 150 grados
	//Por lo tanto: 5v   -> 1023
	//				1.5v -> x
	// x=((1.5v)*(1023))/5v=306.9
	dtostrf(temp, 4, 1, ascii_temp);	//4 es la cantidad de enteros,
 20c:	8e 01       	movw	r16, r28
 20e:	0f 5f       	subi	r16, 0xFF	; 255
 210:	1f 4f       	sbci	r17, 0xFF	; 255
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	44 e0       	ldi	r20, 0x04	; 4
 216:	0e 94 c5 02 	call	0x58a	; 0x58a <dtostrf>
										//1 es la cantidad de decimales										
	// Despliega los valores de las muestras del ADC al LCD
	lcd_i2c_col_row(9,1);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	89 e0       	ldi	r24, 0x09	; 9
 21e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_i2c_col_row>
	lcd_i2c_write_string(ascii_temp);
 222:	c8 01       	movw	r24, r16
 224:	0e 94 ee 01 	call	0x3dc	; 0x3dc <lcd_i2c_write_string>
	lcd_i2c_data(0xDF); //Caracter para indicar grados
 228:	8f ed       	ldi	r24, 0xDF	; 223
 22a:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_i2c_data>
	lcd_i2c_write_string("C");
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 ee 01 	call	0x3dc	; 0x3dc <lcd_i2c_write_string>
	//Comenzar otra conversion
	ADCSRA |= 1<<ADSC;
 236:	ea e7       	ldi	r30, 0x7A	; 122
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	80 64       	ori	r24, 0x40	; 64
 23e:	80 83       	st	Z, r24
}
 240:	2a 96       	adiw	r28, 0x0a	; 10
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	f8 94       	cli
 246:	de bf       	out	0x3e, r29	; 62
 248:	0f be       	out	0x3f, r0	; 63
 24a:	cd bf       	out	0x3d, r28	; 61
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "leds.h"

ISR(INT0_vect) 
{
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	ef 93       	push	r30
 296:	ff 93       	push	r31
	led_on_off();
 298:	0e 94 04 02 	call	0x408	; 0x408 <led_on_off>
}
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <init_ext_int>:

void init_ext_int(void)
{
	EICRA |= 1 << ISC01 | 1 << ISC00;	//activa en flanco de subida
 2be:	e9 e6       	ldi	r30, 0x69	; 105
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	83 60       	ori	r24, 0x03	; 3
 2c6:	80 83       	st	Z, r24
	EICRA |= 1 << ISC11;				//activa en flanco de bajada
 2c8:	80 81       	ld	r24, Z
 2ca:	88 60       	ori	r24, 0x08	; 8
 2cc:	80 83       	st	Z, r24
	EIMSK |= 1 << INT0 | 1 << INT1;		//Activa interrupción 0 y 1
 2ce:	8d b3       	in	r24, 0x1d	; 29
 2d0:	83 60       	ori	r24, 0x03	; 3
 2d2:	8d bb       	out	0x1d, r24	; 29
 2d4:	08 95       	ret

000002d6 <start>:
	TWCR = (1<<TWEN); //Activa la interfaz TWI
}

void start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Genera condición de START
 2d6:	84 ea       	ldi	r24, 0xA4	; 164
 2d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
 2dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2e0:	88 23       	and	r24, r24
 2e2:	e4 f7       	brge	.-8      	; 0x2dc <start+0x6>
}
 2e4:	08 95       	ret

000002e6 <stop>:

void stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //Genera condición de STOP
 2e6:	84 e9       	ldi	r24, 0x94	; 148
 2e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	8f e9       	ldi	r24, 0x9F	; 159
 2ee:	9f e0       	ldi	r25, 0x0F	; 15
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <stop+0xa>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <stop+0x10>
 2f6:	00 00       	nop
 2f8:	08 95       	ret

000002fa <write_i2c>:
	_delay_ms(1);
}

void write_i2c(uint8_t data)
{
	TWDR = data; //Byte a escribir
 2fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Escritura con reconocimiento (TWEA=1)
 2fe:	84 ec       	ldi	r24, 0xC4	; 196
 300:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
 304:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 308:	88 23       	and	r24, r24
 30a:	e4 f7       	brge	.-8      	; 0x304 <write_i2c+0xa>
}
 30c:	08 95       	ret

0000030e <lcd_i2c_cmd>:
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	c8 2f       	mov	r28, r24
 314:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <start>
 318:	8e e4       	ldi	r24, 0x4E	; 78
 31a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <write_i2c>
 31e:	dc 2f       	mov	r29, r28
 320:	d0 7f       	andi	r29, 0xF0	; 240
 322:	8d 2f       	mov	r24, r29
 324:	8c 60       	ori	r24, 0x0C	; 12
 326:	0e 94 7d 01 	call	0x2fa	; 0x2fa <write_i2c>
 32a:	8d 2f       	mov	r24, r29
 32c:	88 60       	ori	r24, 0x08	; 8
 32e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <write_i2c>
 332:	80 e1       	ldi	r24, 0x10	; 16
 334:	c8 9f       	mul	r28, r24
 336:	e0 01       	movw	r28, r0
 338:	11 24       	eor	r1, r1
 33a:	8c 2f       	mov	r24, r28
 33c:	8c 60       	ori	r24, 0x0C	; 12
 33e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <write_i2c>
 342:	8c 2f       	mov	r24, r28
 344:	0e 94 7d 01 	call	0x2fa	; 0x2fa <write_i2c>
 348:	0e 94 73 01 	call	0x2e6	; 0x2e6 <stop>
 34c:	8f e3       	ldi	r24, 0x3F	; 63
 34e:	9f e1       	ldi	r25, 0x1F	; 31
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <lcd_i2c_cmd+0x42>
 354:	00 c0       	rjmp	.+0      	; 0x356 <lcd_i2c_cmd+0x48>
 356:	00 00       	nop
 358:	8f e3       	ldi	r24, 0x3F	; 63
 35a:	9f e1       	ldi	r25, 0x1F	; 31
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_i2c_cmd+0x4e>
 360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_i2c_cmd+0x54>
 362:	00 00       	nop
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <lcd_i2c_data>:
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	c8 2f       	mov	r28, r24
 370:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <start>
 374:	8e e4       	ldi	r24, 0x4E	; 78
 376:	0e 94 7d 01 	call	0x2fa	; 0x2fa <write_i2c>
 37a:	dc 2f       	mov	r29, r28
 37c:	d0 7f       	andi	r29, 0xF0	; 240
 37e:	8d 2f       	mov	r24, r29
 380:	8d 60       	ori	r24, 0x0D	; 13
 382:	0e 94 7d 01 	call	0x2fa	; 0x2fa <write_i2c>
 386:	8d 2f       	mov	r24, r29
 388:	89 60       	ori	r24, 0x09	; 9
 38a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <write_i2c>
 38e:	80 e1       	ldi	r24, 0x10	; 16
 390:	c8 9f       	mul	r28, r24
 392:	e0 01       	movw	r28, r0
 394:	11 24       	eor	r1, r1
 396:	8c 2f       	mov	r24, r28
 398:	8d 60       	ori	r24, 0x0D	; 13
 39a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <write_i2c>
 39e:	8c 2f       	mov	r24, r28
 3a0:	89 60       	ori	r24, 0x09	; 9
 3a2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <write_i2c>
 3a6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <stop>
 3aa:	8f e3       	ldi	r24, 0x3F	; 63
 3ac:	9f e1       	ldi	r25, 0x1F	; 31
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <lcd_i2c_data+0x44>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <lcd_i2c_data+0x4a>
 3b4:	00 00       	nop
 3b6:	8f e3       	ldi	r24, 0x3F	; 63
 3b8:	9f e1       	ldi	r25, 0x1F	; 31
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <lcd_i2c_data+0x50>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <lcd_i2c_data+0x56>
 3c0:	00 00       	nop
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <lcd_i2c_col_row>:
 3c8:	e6 2f       	mov	r30, r22
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	e1 50       	subi	r30, 0x01	; 1
 3ce:	ff 4f       	sbci	r31, 0xFF	; 255
 3d0:	90 81       	ld	r25, Z
 3d2:	89 0f       	add	r24, r25
 3d4:	81 58       	subi	r24, 0x81	; 129
 3d6:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_i2c_cmd>
 3da:	08 95       	ret

000003dc <lcd_i2c_write_string>:
*	Despliega una cadena de caracteres
*	Entrada: Cadena de caracteres entre comillas (p.e. "Hola LCD..")
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_write_string(char *a)
{
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	8c 01       	movw	r16, r24
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 3e6:	c0 e0       	ldi	r28, 0x00	; 0
 3e8:	d0 e0       	ldi	r29, 0x00	; 0
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <lcd_i2c_write_string+0x16>
	lcd_i2c_data(a[i]);
 3ec:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_i2c_data>
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_write_string(char *a)
{
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 3f0:	21 96       	adiw	r28, 0x01	; 1
 3f2:	f8 01       	movw	r30, r16
 3f4:	ec 0f       	add	r30, r28
 3f6:	fd 1f       	adc	r31, r29
 3f8:	80 81       	ld	r24, Z
 3fa:	81 11       	cpse	r24, r1
 3fc:	f7 cf       	rjmp	.-18     	; 0x3ec <lcd_i2c_write_string+0x10>
	lcd_i2c_data(a[i]);
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	08 95       	ret

00000408 <led_on_off>:
	PORTB &= 0 << PINB5;
}

void led_on_off(void)
{
	for(int i=0;i<=4; i++)
 408:	20 e0       	ldi	r18, 0x00	; 0
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	0f c0       	rjmp	.+30     	; 0x42c <led_on_off+0x24>
	{
	PORTB ^= 1 << PINB5;
 40e:	95 b1       	in	r25, 0x05	; 5
 410:	80 e2       	ldi	r24, 0x20	; 32
 412:	89 27       	eor	r24, r25
 414:	85 b9       	out	0x05, r24	; 5
 416:	4f ef       	ldi	r20, 0xFF	; 255
 418:	89 e6       	ldi	r24, 0x69	; 105
 41a:	98 e1       	ldi	r25, 0x18	; 24
 41c:	41 50       	subi	r20, 0x01	; 1
 41e:	80 40       	sbci	r24, 0x00	; 0
 420:	90 40       	sbci	r25, 0x00	; 0
 422:	e1 f7       	brne	.-8      	; 0x41c <led_on_off+0x14>
 424:	00 c0       	rjmp	.+0      	; 0x426 <led_on_off+0x1e>
 426:	00 00       	nop
	PORTB &= 0 << PINB5;
}

void led_on_off(void)
{
	for(int i=0;i<=4; i++)
 428:	2f 5f       	subi	r18, 0xFF	; 255
 42a:	3f 4f       	sbci	r19, 0xFF	; 255
 42c:	25 30       	cpi	r18, 0x05	; 5
 42e:	31 05       	cpc	r19, r1
 430:	74 f3       	brlt	.-36     	; 0x40e <led_on_off+0x6>
	{
	PORTB ^= 1 << PINB5;
	_delay_ms(500);	
	}
}
 432:	08 95       	ret

00000434 <main>:
{
	//ADC_WithInterrupt();
	//lcd_i2c_init();
	//lcd_i2c_col_row(4,1);
	//lcd_i2c_write_string("TEMP:");
	init_usart(207);
 434:	8f ec       	ldi	r24, 0xCF	; 207
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 5e 02 	call	0x4bc	; 0x4bc <init_usart>
	init_ports();
 43c:	0e 94 24 02 	call	0x448	; 0x448 <init_ports>
	init_ext_int();
 440:	0e 94 5f 01 	call	0x2be	; 0x2be <init_ext_int>
	sei(); //Interrupciones generales
 444:	78 94       	sei
 446:	ff cf       	rjmp	.-2      	; 0x446 <main+0x12>

00000448 <init_ports>:
 */ 
#include <avr/io.h>

void init_ports(void)
{
	DDRB |= 1 << PINB5; //Led conectado a PB5
 448:	84 b1       	in	r24, 0x04	; 4
 44a:	80 62       	ori	r24, 0x20	; 32
 44c:	84 b9       	out	0x04, r24	; 4
 44e:	08 95       	ret

00000450 <usart_transmit>:
  while (i < 64)
  {
	  if (s[i] == '\0') break;
	  usart_transmit(s[i++]);
  }
}
 450:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 454:	95 ff       	sbrs	r25, 5
 456:	fc cf       	rjmp	.-8      	; 0x450 <usart_transmit>
 458:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 45c:	08 95       	ret

0000045e <__vector_18>:
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	2f 93       	push	r18
 46a:	3f 93       	push	r19
 46c:	4f 93       	push	r20
 46e:	5f 93       	push	r21
 470:	6f 93       	push	r22
 472:	7f 93       	push	r23
 474:	8f 93       	push	r24
 476:	9f 93       	push	r25
 478:	af 93       	push	r26
 47a:	bf 93       	push	r27
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
 480:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 484:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 488:	80 e4       	ldi	r24, 0x40	; 64
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 28 02 	call	0x450	; 0x450 <usart_transmit>
 490:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 28 02 	call	0x450	; 0x450 <usart_transmit>
 49a:	ff 91       	pop	r31
 49c:	ef 91       	pop	r30
 49e:	bf 91       	pop	r27
 4a0:	af 91       	pop	r26
 4a2:	9f 91       	pop	r25
 4a4:	8f 91       	pop	r24
 4a6:	7f 91       	pop	r23
 4a8:	6f 91       	pop	r22
 4aa:	5f 91       	pop	r21
 4ac:	4f 91       	pop	r20
 4ae:	3f 91       	pop	r19
 4b0:	2f 91       	pop	r18
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <init_usart>:
* Entrada: valor de UBRR de las tablas(datasheet)de BAUDRATE
*/
void init_usart(unsigned int baudrate)
{
	//Escoge modo de reloj: UMSEL=0 asíncrono, UMSEL=1 síncrono
	UCSR0C &= (~(1<<UMSEL00) & ~(1<<UMSEL01)); // bit UMSEL = 0 asíncrono
 4bc:	e2 ec       	ldi	r30, 0xC2	; 194
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	20 81       	ld	r18, Z
 4c2:	2f 73       	andi	r18, 0x3F	; 63
 4c4:	20 83       	st	Z, r18
	
	//En modo asíncrono escoge la velocidad: U2X=0 normal, U2X=1 doble
	UCSR0A = (1<<U2X0); // bit U2X = 1 doble
 4c6:	22 e0       	ldi	r18, 0x02	; 2
 4c8:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Baudrate ejemplo: fosc = 16 Mhz, U2Xn= 1, BaudRate = 9600, entonces UBRR= 207
	//Ver DataSheet pag.153
	UBRR0H = (unsigned char) (baudrate>>8); // Escribe (MSB) en la parte alta del registro
 4cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) (baudrate); //Escribe (LSB) el valor en la parte baja
 4d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Tamaño de los datos
	UCSR0C = ((1<<UCSZ00) | (1<<UCSZ01)); //Selecciona registro,8 bits para longitud de datos
 4d4:	86 e0       	ldi	r24, 0x06	; 6
 4d6:	80 83       	st	Z, r24
	
	//Habilitar el transmisor y receptor
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 4d8:	e1 ec       	ldi	r30, 0xC1	; 193
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	88 e1       	ldi	r24, 0x18	; 24
 4de:	80 83       	st	Z, r24
	//Habilita 2 bits de paro
	//UCSRC = (1<<USBS);
	
	
	//Para activar/desactivar las interrupcines, sólo quitar/poner el símbolo de comentarios
	UCSR0B |= (1<<RXCIE0);	//Activa interrupciones de "recepción completada" (RXCIE=1)
 4e0:	80 81       	ld	r24, Z
 4e2:	80 68       	ori	r24, 0x80	; 128
 4e4:	80 83       	st	Z, r24
 4e6:	08 95       	ret

000004e8 <__floatunsisf>:
 4e8:	e8 94       	clt
 4ea:	09 c0       	rjmp	.+18     	; 0x4fe <__floatsisf+0x12>

000004ec <__floatsisf>:
 4ec:	97 fb       	bst	r25, 7
 4ee:	3e f4       	brtc	.+14     	; 0x4fe <__floatsisf+0x12>
 4f0:	90 95       	com	r25
 4f2:	80 95       	com	r24
 4f4:	70 95       	com	r23
 4f6:	61 95       	neg	r22
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	8f 4f       	sbci	r24, 0xFF	; 255
 4fc:	9f 4f       	sbci	r25, 0xFF	; 255
 4fe:	99 23       	and	r25, r25
 500:	a9 f0       	breq	.+42     	; 0x52c <__floatsisf+0x40>
 502:	f9 2f       	mov	r31, r25
 504:	96 e9       	ldi	r25, 0x96	; 150
 506:	bb 27       	eor	r27, r27
 508:	93 95       	inc	r25
 50a:	f6 95       	lsr	r31
 50c:	87 95       	ror	r24
 50e:	77 95       	ror	r23
 510:	67 95       	ror	r22
 512:	b7 95       	ror	r27
 514:	f1 11       	cpse	r31, r1
 516:	f8 cf       	rjmp	.-16     	; 0x508 <__floatsisf+0x1c>
 518:	fa f4       	brpl	.+62     	; 0x558 <__floatsisf+0x6c>
 51a:	bb 0f       	add	r27, r27
 51c:	11 f4       	brne	.+4      	; 0x522 <__floatsisf+0x36>
 51e:	60 ff       	sbrs	r22, 0
 520:	1b c0       	rjmp	.+54     	; 0x558 <__floatsisf+0x6c>
 522:	6f 5f       	subi	r22, 0xFF	; 255
 524:	7f 4f       	sbci	r23, 0xFF	; 255
 526:	8f 4f       	sbci	r24, 0xFF	; 255
 528:	9f 4f       	sbci	r25, 0xFF	; 255
 52a:	16 c0       	rjmp	.+44     	; 0x558 <__floatsisf+0x6c>
 52c:	88 23       	and	r24, r24
 52e:	11 f0       	breq	.+4      	; 0x534 <__floatsisf+0x48>
 530:	96 e9       	ldi	r25, 0x96	; 150
 532:	11 c0       	rjmp	.+34     	; 0x556 <__floatsisf+0x6a>
 534:	77 23       	and	r23, r23
 536:	21 f0       	breq	.+8      	; 0x540 <__floatsisf+0x54>
 538:	9e e8       	ldi	r25, 0x8E	; 142
 53a:	87 2f       	mov	r24, r23
 53c:	76 2f       	mov	r23, r22
 53e:	05 c0       	rjmp	.+10     	; 0x54a <__floatsisf+0x5e>
 540:	66 23       	and	r22, r22
 542:	71 f0       	breq	.+28     	; 0x560 <__floatsisf+0x74>
 544:	96 e8       	ldi	r25, 0x86	; 134
 546:	86 2f       	mov	r24, r22
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	2a f0       	brmi	.+10     	; 0x558 <__floatsisf+0x6c>
 54e:	9a 95       	dec	r25
 550:	66 0f       	add	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	88 1f       	adc	r24, r24
 556:	da f7       	brpl	.-10     	; 0x54e <__floatsisf+0x62>
 558:	88 0f       	add	r24, r24
 55a:	96 95       	lsr	r25
 55c:	87 95       	ror	r24
 55e:	97 f9       	bld	r25, 7
 560:	08 95       	ret

00000562 <__udivmodhi4>:
 562:	aa 1b       	sub	r26, r26
 564:	bb 1b       	sub	r27, r27
 566:	51 e1       	ldi	r21, 0x11	; 17
 568:	07 c0       	rjmp	.+14     	; 0x578 <__udivmodhi4_ep>

0000056a <__udivmodhi4_loop>:
 56a:	aa 1f       	adc	r26, r26
 56c:	bb 1f       	adc	r27, r27
 56e:	a6 17       	cp	r26, r22
 570:	b7 07       	cpc	r27, r23
 572:	10 f0       	brcs	.+4      	; 0x578 <__udivmodhi4_ep>
 574:	a6 1b       	sub	r26, r22
 576:	b7 0b       	sbc	r27, r23

00000578 <__udivmodhi4_ep>:
 578:	88 1f       	adc	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	5a 95       	dec	r21
 57e:	a9 f7       	brne	.-22     	; 0x56a <__udivmodhi4_loop>
 580:	80 95       	com	r24
 582:	90 95       	com	r25
 584:	bc 01       	movw	r22, r24
 586:	cd 01       	movw	r24, r26
 588:	08 95       	ret

0000058a <dtostrf>:
 58a:	ef 92       	push	r14
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	e8 01       	movw	r28, r16
 596:	47 fd       	sbrc	r20, 7
 598:	02 c0       	rjmp	.+4      	; 0x59e <dtostrf+0x14>
 59a:	34 e0       	ldi	r19, 0x04	; 4
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <dtostrf+0x16>
 59e:	34 e1       	ldi	r19, 0x14	; 20
 5a0:	04 2e       	mov	r0, r20
 5a2:	00 0c       	add	r0, r0
 5a4:	55 0b       	sbc	r21, r21
 5a6:	57 ff       	sbrs	r21, 7
 5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <dtostrf+0x26>
 5aa:	51 95       	neg	r21
 5ac:	41 95       	neg	r20
 5ae:	51 09       	sbc	r21, r1
 5b0:	e3 2e       	mov	r14, r19
 5b2:	02 2f       	mov	r16, r18
 5b4:	24 2f       	mov	r18, r20
 5b6:	ae 01       	movw	r20, r28
 5b8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <dtoa_prf>
 5bc:	ce 01       	movw	r24, r28
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	ef 90       	pop	r14
 5c8:	08 95       	ret

000005ca <dtoa_prf>:
 5ca:	a9 e0       	ldi	r26, 0x09	; 9
 5cc:	b0 e0       	ldi	r27, 0x00	; 0
 5ce:	eb ee       	ldi	r30, 0xEB	; 235
 5d0:	f2 e0       	ldi	r31, 0x02	; 2
 5d2:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__prologue_saves__+0xc>
 5d6:	6a 01       	movw	r12, r20
 5d8:	12 2f       	mov	r17, r18
 5da:	b0 2e       	mov	r11, r16
 5dc:	2b e3       	ldi	r18, 0x3B	; 59
 5de:	20 17       	cp	r18, r16
 5e0:	20 f0       	brcs	.+8      	; 0x5ea <dtoa_prf+0x20>
 5e2:	ff 24       	eor	r15, r15
 5e4:	f3 94       	inc	r15
 5e6:	f0 0e       	add	r15, r16
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <dtoa_prf+0x24>
 5ea:	2c e3       	ldi	r18, 0x3C	; 60
 5ec:	f2 2e       	mov	r15, r18
 5ee:	0f 2d       	mov	r16, r15
 5f0:	27 e0       	ldi	r18, 0x07	; 7
 5f2:	ae 01       	movw	r20, r28
 5f4:	4f 5f       	subi	r20, 0xFF	; 255
 5f6:	5f 4f       	sbci	r21, 0xFF	; 255
 5f8:	0e 94 3f 04 	call	0x87e	; 0x87e <__ftoa_engine>
 5fc:	bc 01       	movw	r22, r24
 5fe:	49 81       	ldd	r20, Y+1	; 0x01
 600:	84 2f       	mov	r24, r20
 602:	89 70       	andi	r24, 0x09	; 9
 604:	81 30       	cpi	r24, 0x01	; 1
 606:	31 f0       	breq	.+12     	; 0x614 <dtoa_prf+0x4a>
 608:	e1 fc       	sbrc	r14, 1
 60a:	06 c0       	rjmp	.+12     	; 0x618 <dtoa_prf+0x4e>
 60c:	e0 fe       	sbrs	r14, 0
 60e:	06 c0       	rjmp	.+12     	; 0x61c <dtoa_prf+0x52>
 610:	90 e2       	ldi	r25, 0x20	; 32
 612:	05 c0       	rjmp	.+10     	; 0x61e <dtoa_prf+0x54>
 614:	9d e2       	ldi	r25, 0x2D	; 45
 616:	03 c0       	rjmp	.+6      	; 0x61e <dtoa_prf+0x54>
 618:	9b e2       	ldi	r25, 0x2B	; 43
 61a:	01 c0       	rjmp	.+2      	; 0x61e <dtoa_prf+0x54>
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	5e 2d       	mov	r21, r14
 620:	50 71       	andi	r21, 0x10	; 16
 622:	43 ff       	sbrs	r20, 3
 624:	3c c0       	rjmp	.+120    	; 0x69e <dtoa_prf+0xd4>
 626:	91 11       	cpse	r25, r1
 628:	02 c0       	rjmp	.+4      	; 0x62e <dtoa_prf+0x64>
 62a:	83 e0       	ldi	r24, 0x03	; 3
 62c:	01 c0       	rjmp	.+2      	; 0x630 <dtoa_prf+0x66>
 62e:	84 e0       	ldi	r24, 0x04	; 4
 630:	81 17       	cp	r24, r17
 632:	18 f4       	brcc	.+6      	; 0x63a <dtoa_prf+0x70>
 634:	21 2f       	mov	r18, r17
 636:	28 1b       	sub	r18, r24
 638:	01 c0       	rjmp	.+2      	; 0x63c <dtoa_prf+0x72>
 63a:	20 e0       	ldi	r18, 0x00	; 0
 63c:	51 11       	cpse	r21, r1
 63e:	0b c0       	rjmp	.+22     	; 0x656 <dtoa_prf+0x8c>
 640:	f6 01       	movw	r30, r12
 642:	82 2f       	mov	r24, r18
 644:	30 e2       	ldi	r19, 0x20	; 32
 646:	88 23       	and	r24, r24
 648:	19 f0       	breq	.+6      	; 0x650 <dtoa_prf+0x86>
 64a:	31 93       	st	Z+, r19
 64c:	81 50       	subi	r24, 0x01	; 1
 64e:	fb cf       	rjmp	.-10     	; 0x646 <dtoa_prf+0x7c>
 650:	c2 0e       	add	r12, r18
 652:	d1 1c       	adc	r13, r1
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	99 23       	and	r25, r25
 658:	29 f0       	breq	.+10     	; 0x664 <dtoa_prf+0x9a>
 65a:	d6 01       	movw	r26, r12
 65c:	9c 93       	st	X, r25
 65e:	f6 01       	movw	r30, r12
 660:	31 96       	adiw	r30, 0x01	; 1
 662:	6f 01       	movw	r12, r30
 664:	c6 01       	movw	r24, r12
 666:	03 96       	adiw	r24, 0x03	; 3
 668:	e2 fe       	sbrs	r14, 2
 66a:	0a c0       	rjmp	.+20     	; 0x680 <dtoa_prf+0xb6>
 66c:	3e e4       	ldi	r19, 0x4E	; 78
 66e:	d6 01       	movw	r26, r12
 670:	3c 93       	st	X, r19
 672:	41 e4       	ldi	r20, 0x41	; 65
 674:	11 96       	adiw	r26, 0x01	; 1
 676:	4c 93       	st	X, r20
 678:	11 97       	sbiw	r26, 0x01	; 1
 67a:	12 96       	adiw	r26, 0x02	; 2
 67c:	3c 93       	st	X, r19
 67e:	06 c0       	rjmp	.+12     	; 0x68c <dtoa_prf+0xc2>
 680:	3e e6       	ldi	r19, 0x6E	; 110
 682:	f6 01       	movw	r30, r12
 684:	30 83       	st	Z, r19
 686:	41 e6       	ldi	r20, 0x61	; 97
 688:	41 83       	std	Z+1, r20	; 0x01
 68a:	32 83       	std	Z+2, r19	; 0x02
 68c:	fc 01       	movw	r30, r24
 68e:	32 2f       	mov	r19, r18
 690:	40 e2       	ldi	r20, 0x20	; 32
 692:	33 23       	and	r19, r19
 694:	09 f4       	brne	.+2      	; 0x698 <dtoa_prf+0xce>
 696:	42 c0       	rjmp	.+132    	; 0x71c <dtoa_prf+0x152>
 698:	41 93       	st	Z+, r20
 69a:	31 50       	subi	r19, 0x01	; 1
 69c:	fa cf       	rjmp	.-12     	; 0x692 <dtoa_prf+0xc8>
 69e:	42 ff       	sbrs	r20, 2
 6a0:	44 c0       	rjmp	.+136    	; 0x72a <dtoa_prf+0x160>
 6a2:	91 11       	cpse	r25, r1
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <dtoa_prf+0xe0>
 6a6:	83 e0       	ldi	r24, 0x03	; 3
 6a8:	01 c0       	rjmp	.+2      	; 0x6ac <dtoa_prf+0xe2>
 6aa:	84 e0       	ldi	r24, 0x04	; 4
 6ac:	81 17       	cp	r24, r17
 6ae:	18 f4       	brcc	.+6      	; 0x6b6 <dtoa_prf+0xec>
 6b0:	21 2f       	mov	r18, r17
 6b2:	28 1b       	sub	r18, r24
 6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <dtoa_prf+0xee>
 6b6:	20 e0       	ldi	r18, 0x00	; 0
 6b8:	51 11       	cpse	r21, r1
 6ba:	0b c0       	rjmp	.+22     	; 0x6d2 <dtoa_prf+0x108>
 6bc:	f6 01       	movw	r30, r12
 6be:	82 2f       	mov	r24, r18
 6c0:	30 e2       	ldi	r19, 0x20	; 32
 6c2:	88 23       	and	r24, r24
 6c4:	19 f0       	breq	.+6      	; 0x6cc <dtoa_prf+0x102>
 6c6:	31 93       	st	Z+, r19
 6c8:	81 50       	subi	r24, 0x01	; 1
 6ca:	fb cf       	rjmp	.-10     	; 0x6c2 <dtoa_prf+0xf8>
 6cc:	c2 0e       	add	r12, r18
 6ce:	d1 1c       	adc	r13, r1
 6d0:	20 e0       	ldi	r18, 0x00	; 0
 6d2:	99 23       	and	r25, r25
 6d4:	29 f0       	breq	.+10     	; 0x6e0 <dtoa_prf+0x116>
 6d6:	d6 01       	movw	r26, r12
 6d8:	9c 93       	st	X, r25
 6da:	f6 01       	movw	r30, r12
 6dc:	31 96       	adiw	r30, 0x01	; 1
 6de:	6f 01       	movw	r12, r30
 6e0:	c6 01       	movw	r24, r12
 6e2:	03 96       	adiw	r24, 0x03	; 3
 6e4:	e2 fe       	sbrs	r14, 2
 6e6:	0b c0       	rjmp	.+22     	; 0x6fe <dtoa_prf+0x134>
 6e8:	39 e4       	ldi	r19, 0x49	; 73
 6ea:	d6 01       	movw	r26, r12
 6ec:	3c 93       	st	X, r19
 6ee:	3e e4       	ldi	r19, 0x4E	; 78
 6f0:	11 96       	adiw	r26, 0x01	; 1
 6f2:	3c 93       	st	X, r19
 6f4:	11 97       	sbiw	r26, 0x01	; 1
 6f6:	36 e4       	ldi	r19, 0x46	; 70
 6f8:	12 96       	adiw	r26, 0x02	; 2
 6fa:	3c 93       	st	X, r19
 6fc:	07 c0       	rjmp	.+14     	; 0x70c <dtoa_prf+0x142>
 6fe:	39 e6       	ldi	r19, 0x69	; 105
 700:	f6 01       	movw	r30, r12
 702:	30 83       	st	Z, r19
 704:	3e e6       	ldi	r19, 0x6E	; 110
 706:	31 83       	std	Z+1, r19	; 0x01
 708:	36 e6       	ldi	r19, 0x66	; 102
 70a:	32 83       	std	Z+2, r19	; 0x02
 70c:	fc 01       	movw	r30, r24
 70e:	32 2f       	mov	r19, r18
 710:	40 e2       	ldi	r20, 0x20	; 32
 712:	33 23       	and	r19, r19
 714:	19 f0       	breq	.+6      	; 0x71c <dtoa_prf+0x152>
 716:	41 93       	st	Z+, r20
 718:	31 50       	subi	r19, 0x01	; 1
 71a:	fb cf       	rjmp	.-10     	; 0x712 <dtoa_prf+0x148>
 71c:	fc 01       	movw	r30, r24
 71e:	e2 0f       	add	r30, r18
 720:	f1 1d       	adc	r31, r1
 722:	10 82       	st	Z, r1
 724:	8e ef       	ldi	r24, 0xFE	; 254
 726:	9f ef       	ldi	r25, 0xFF	; 255
 728:	a6 c0       	rjmp	.+332    	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 72a:	21 e0       	ldi	r18, 0x01	; 1
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	91 11       	cpse	r25, r1
 730:	02 c0       	rjmp	.+4      	; 0x736 <dtoa_prf+0x16c>
 732:	20 e0       	ldi	r18, 0x00	; 0
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	16 16       	cp	r1, r22
 738:	17 06       	cpc	r1, r23
 73a:	1c f4       	brge	.+6      	; 0x742 <dtoa_prf+0x178>
 73c:	fb 01       	movw	r30, r22
 73e:	31 96       	adiw	r30, 0x01	; 1
 740:	02 c0       	rjmp	.+4      	; 0x746 <dtoa_prf+0x17c>
 742:	e1 e0       	ldi	r30, 0x01	; 1
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	2e 0f       	add	r18, r30
 748:	3f 1f       	adc	r19, r31
 74a:	bb 20       	and	r11, r11
 74c:	21 f0       	breq	.+8      	; 0x756 <dtoa_prf+0x18c>
 74e:	eb 2d       	mov	r30, r11
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	31 96       	adiw	r30, 0x01	; 1
 754:	02 c0       	rjmp	.+4      	; 0x75a <dtoa_prf+0x190>
 756:	e0 e0       	ldi	r30, 0x00	; 0
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	2e 0f       	add	r18, r30
 75c:	3f 1f       	adc	r19, r31
 75e:	e1 2f       	mov	r30, r17
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	2e 17       	cp	r18, r30
 764:	3f 07       	cpc	r19, r31
 766:	1c f4       	brge	.+6      	; 0x76e <dtoa_prf+0x1a4>
 768:	12 1b       	sub	r17, r18
 76a:	21 2f       	mov	r18, r17
 76c:	01 c0       	rjmp	.+2      	; 0x770 <dtoa_prf+0x1a6>
 76e:	20 e0       	ldi	r18, 0x00	; 0
 770:	8e 2d       	mov	r24, r14
 772:	88 71       	andi	r24, 0x18	; 24
 774:	59 f4       	brne	.+22     	; 0x78c <dtoa_prf+0x1c2>
 776:	f6 01       	movw	r30, r12
 778:	82 2f       	mov	r24, r18
 77a:	30 e2       	ldi	r19, 0x20	; 32
 77c:	88 23       	and	r24, r24
 77e:	19 f0       	breq	.+6      	; 0x786 <dtoa_prf+0x1bc>
 780:	31 93       	st	Z+, r19
 782:	81 50       	subi	r24, 0x01	; 1
 784:	fb cf       	rjmp	.-10     	; 0x77c <dtoa_prf+0x1b2>
 786:	c2 0e       	add	r12, r18
 788:	d1 1c       	adc	r13, r1
 78a:	20 e0       	ldi	r18, 0x00	; 0
 78c:	99 23       	and	r25, r25
 78e:	29 f0       	breq	.+10     	; 0x79a <dtoa_prf+0x1d0>
 790:	d6 01       	movw	r26, r12
 792:	9c 93       	st	X, r25
 794:	f6 01       	movw	r30, r12
 796:	31 96       	adiw	r30, 0x01	; 1
 798:	6f 01       	movw	r12, r30
 79a:	51 11       	cpse	r21, r1
 79c:	0b c0       	rjmp	.+22     	; 0x7b4 <dtoa_prf+0x1ea>
 79e:	f6 01       	movw	r30, r12
 7a0:	82 2f       	mov	r24, r18
 7a2:	90 e3       	ldi	r25, 0x30	; 48
 7a4:	88 23       	and	r24, r24
 7a6:	19 f0       	breq	.+6      	; 0x7ae <dtoa_prf+0x1e4>
 7a8:	91 93       	st	Z+, r25
 7aa:	81 50       	subi	r24, 0x01	; 1
 7ac:	fb cf       	rjmp	.-10     	; 0x7a4 <dtoa_prf+0x1da>
 7ae:	c2 0e       	add	r12, r18
 7b0:	d1 1c       	adc	r13, r1
 7b2:	20 e0       	ldi	r18, 0x00	; 0
 7b4:	0f 2d       	mov	r16, r15
 7b6:	06 0f       	add	r16, r22
 7b8:	9a 81       	ldd	r25, Y+2	; 0x02
 7ba:	34 2f       	mov	r19, r20
 7bc:	30 71       	andi	r19, 0x10	; 16
 7be:	44 ff       	sbrs	r20, 4
 7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <dtoa_prf+0x1fe>
 7c2:	91 33       	cpi	r25, 0x31	; 49
 7c4:	09 f4       	brne	.+2      	; 0x7c8 <dtoa_prf+0x1fe>
 7c6:	01 50       	subi	r16, 0x01	; 1
 7c8:	10 16       	cp	r1, r16
 7ca:	24 f4       	brge	.+8      	; 0x7d4 <dtoa_prf+0x20a>
 7cc:	09 30       	cpi	r16, 0x09	; 9
 7ce:	18 f0       	brcs	.+6      	; 0x7d6 <dtoa_prf+0x20c>
 7d0:	08 e0       	ldi	r16, 0x08	; 8
 7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <dtoa_prf+0x20c>
 7d4:	01 e0       	ldi	r16, 0x01	; 1
 7d6:	ab 01       	movw	r20, r22
 7d8:	77 ff       	sbrs	r23, 7
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <dtoa_prf+0x216>
 7dc:	40 e0       	ldi	r20, 0x00	; 0
 7de:	50 e0       	ldi	r21, 0x00	; 0
 7e0:	fb 01       	movw	r30, r22
 7e2:	e4 1b       	sub	r30, r20
 7e4:	f5 0b       	sbc	r31, r21
 7e6:	a1 e0       	ldi	r26, 0x01	; 1
 7e8:	b0 e0       	ldi	r27, 0x00	; 0
 7ea:	ac 0f       	add	r26, r28
 7ec:	bd 1f       	adc	r27, r29
 7ee:	ea 0f       	add	r30, r26
 7f0:	fb 1f       	adc	r31, r27
 7f2:	8e e2       	ldi	r24, 0x2E	; 46
 7f4:	a8 2e       	mov	r10, r24
 7f6:	4b 01       	movw	r8, r22
 7f8:	80 1a       	sub	r8, r16
 7fa:	91 08       	sbc	r9, r1
 7fc:	0b 2d       	mov	r16, r11
 7fe:	10 e0       	ldi	r17, 0x00	; 0
 800:	11 95       	neg	r17
 802:	01 95       	neg	r16
 804:	11 09       	sbc	r17, r1
 806:	4f 3f       	cpi	r20, 0xFF	; 255
 808:	bf ef       	ldi	r27, 0xFF	; 255
 80a:	5b 07       	cpc	r21, r27
 80c:	21 f4       	brne	.+8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 80e:	d6 01       	movw	r26, r12
 810:	ac 92       	st	X, r10
 812:	11 96       	adiw	r26, 0x01	; 1
 814:	6d 01       	movw	r12, r26
 816:	64 17       	cp	r22, r20
 818:	75 07       	cpc	r23, r21
 81a:	2c f0       	brlt	.+10     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 81c:	84 16       	cp	r8, r20
 81e:	95 06       	cpc	r9, r21
 820:	14 f4       	brge	.+4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 822:	81 81       	ldd	r24, Z+1	; 0x01
 824:	01 c0       	rjmp	.+2      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 826:	80 e3       	ldi	r24, 0x30	; 48
 828:	41 50       	subi	r20, 0x01	; 1
 82a:	51 09       	sbc	r21, r1
 82c:	31 96       	adiw	r30, 0x01	; 1
 82e:	d6 01       	movw	r26, r12
 830:	11 96       	adiw	r26, 0x01	; 1
 832:	7d 01       	movw	r14, r26
 834:	40 17       	cp	r20, r16
 836:	51 07       	cpc	r21, r17
 838:	24 f0       	brlt	.+8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83a:	d6 01       	movw	r26, r12
 83c:	8c 93       	st	X, r24
 83e:	67 01       	movw	r12, r14
 840:	e2 cf       	rjmp	.-60     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 842:	64 17       	cp	r22, r20
 844:	75 07       	cpc	r23, r21
 846:	39 f4       	brne	.+14     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 848:	96 33       	cpi	r25, 0x36	; 54
 84a:	20 f4       	brcc	.+8      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 84c:	95 33       	cpi	r25, 0x35	; 53
 84e:	19 f4       	brne	.+6      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 850:	31 11       	cpse	r19, r1
 852:	01 c0       	rjmp	.+2      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 854:	81 e3       	ldi	r24, 0x31	; 49
 856:	f6 01       	movw	r30, r12
 858:	80 83       	st	Z, r24
 85a:	f7 01       	movw	r30, r14
 85c:	82 2f       	mov	r24, r18
 85e:	90 e2       	ldi	r25, 0x20	; 32
 860:	88 23       	and	r24, r24
 862:	19 f0       	breq	.+6      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 864:	91 93       	st	Z+, r25
 866:	81 50       	subi	r24, 0x01	; 1
 868:	fb cf       	rjmp	.-10     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 86a:	f7 01       	movw	r30, r14
 86c:	e2 0f       	add	r30, r18
 86e:	f1 1d       	adc	r31, r1
 870:	10 82       	st	Z, r1
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	29 96       	adiw	r28, 0x09	; 9
 878:	ec e0       	ldi	r30, 0x0C	; 12
 87a:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__epilogue_restores__+0xc>

0000087e <__ftoa_engine>:
 87e:	28 30       	cpi	r18, 0x08	; 8
 880:	08 f0       	brcs	.+2      	; 0x884 <__ftoa_engine+0x6>
 882:	27 e0       	ldi	r18, 0x07	; 7
 884:	33 27       	eor	r19, r19
 886:	da 01       	movw	r26, r20
 888:	99 0f       	add	r25, r25
 88a:	31 1d       	adc	r19, r1
 88c:	87 fd       	sbrc	r24, 7
 88e:	91 60       	ori	r25, 0x01	; 1
 890:	00 96       	adiw	r24, 0x00	; 0
 892:	61 05       	cpc	r22, r1
 894:	71 05       	cpc	r23, r1
 896:	39 f4       	brne	.+14     	; 0x8a6 <__ftoa_engine+0x28>
 898:	32 60       	ori	r19, 0x02	; 2
 89a:	2e 5f       	subi	r18, 0xFE	; 254
 89c:	3d 93       	st	X+, r19
 89e:	30 e3       	ldi	r19, 0x30	; 48
 8a0:	2a 95       	dec	r18
 8a2:	e1 f7       	brne	.-8      	; 0x89c <__ftoa_engine+0x1e>
 8a4:	08 95       	ret
 8a6:	9f 3f       	cpi	r25, 0xFF	; 255
 8a8:	30 f0       	brcs	.+12     	; 0x8b6 <__ftoa_engine+0x38>
 8aa:	80 38       	cpi	r24, 0x80	; 128
 8ac:	71 05       	cpc	r23, r1
 8ae:	61 05       	cpc	r22, r1
 8b0:	09 f0       	breq	.+2      	; 0x8b4 <__ftoa_engine+0x36>
 8b2:	3c 5f       	subi	r19, 0xFC	; 252
 8b4:	3c 5f       	subi	r19, 0xFC	; 252
 8b6:	3d 93       	st	X+, r19
 8b8:	91 30       	cpi	r25, 0x01	; 1
 8ba:	08 f0       	brcs	.+2      	; 0x8be <__ftoa_engine+0x40>
 8bc:	80 68       	ori	r24, 0x80	; 128
 8be:	91 1d       	adc	r25, r1
 8c0:	df 93       	push	r29
 8c2:	cf 93       	push	r28
 8c4:	1f 93       	push	r17
 8c6:	0f 93       	push	r16
 8c8:	ff 92       	push	r15
 8ca:	ef 92       	push	r14
 8cc:	19 2f       	mov	r17, r25
 8ce:	98 7f       	andi	r25, 0xF8	; 248
 8d0:	96 95       	lsr	r25
 8d2:	e9 2f       	mov	r30, r25
 8d4:	96 95       	lsr	r25
 8d6:	96 95       	lsr	r25
 8d8:	e9 0f       	add	r30, r25
 8da:	ff 27       	eor	r31, r31
 8dc:	ee 53       	subi	r30, 0x3E	; 62
 8de:	ff 4f       	sbci	r31, 0xFF	; 255
 8e0:	99 27       	eor	r25, r25
 8e2:	33 27       	eor	r19, r19
 8e4:	ee 24       	eor	r14, r14
 8e6:	ff 24       	eor	r15, r15
 8e8:	a7 01       	movw	r20, r14
 8ea:	e7 01       	movw	r28, r14
 8ec:	05 90       	lpm	r0, Z+
 8ee:	08 94       	sec
 8f0:	07 94       	ror	r0
 8f2:	28 f4       	brcc	.+10     	; 0x8fe <__ftoa_engine+0x80>
 8f4:	36 0f       	add	r19, r22
 8f6:	e7 1e       	adc	r14, r23
 8f8:	f8 1e       	adc	r15, r24
 8fa:	49 1f       	adc	r20, r25
 8fc:	51 1d       	adc	r21, r1
 8fe:	66 0f       	add	r22, r22
 900:	77 1f       	adc	r23, r23
 902:	88 1f       	adc	r24, r24
 904:	99 1f       	adc	r25, r25
 906:	06 94       	lsr	r0
 908:	a1 f7       	brne	.-24     	; 0x8f2 <__ftoa_engine+0x74>
 90a:	05 90       	lpm	r0, Z+
 90c:	07 94       	ror	r0
 90e:	28 f4       	brcc	.+10     	; 0x91a <__stack+0x1b>
 910:	e7 0e       	add	r14, r23
 912:	f8 1e       	adc	r15, r24
 914:	49 1f       	adc	r20, r25
 916:	56 1f       	adc	r21, r22
 918:	c1 1d       	adc	r28, r1
 91a:	77 0f       	add	r23, r23
 91c:	88 1f       	adc	r24, r24
 91e:	99 1f       	adc	r25, r25
 920:	66 1f       	adc	r22, r22
 922:	06 94       	lsr	r0
 924:	a1 f7       	brne	.-24     	; 0x90e <__stack+0xf>
 926:	05 90       	lpm	r0, Z+
 928:	07 94       	ror	r0
 92a:	28 f4       	brcc	.+10     	; 0x936 <__stack+0x37>
 92c:	f8 0e       	add	r15, r24
 92e:	49 1f       	adc	r20, r25
 930:	56 1f       	adc	r21, r22
 932:	c7 1f       	adc	r28, r23
 934:	d1 1d       	adc	r29, r1
 936:	88 0f       	add	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	66 1f       	adc	r22, r22
 93c:	77 1f       	adc	r23, r23
 93e:	06 94       	lsr	r0
 940:	a1 f7       	brne	.-24     	; 0x92a <__stack+0x2b>
 942:	05 90       	lpm	r0, Z+
 944:	07 94       	ror	r0
 946:	20 f4       	brcc	.+8      	; 0x950 <__stack+0x51>
 948:	49 0f       	add	r20, r25
 94a:	56 1f       	adc	r21, r22
 94c:	c7 1f       	adc	r28, r23
 94e:	d8 1f       	adc	r29, r24
 950:	99 0f       	add	r25, r25
 952:	66 1f       	adc	r22, r22
 954:	77 1f       	adc	r23, r23
 956:	88 1f       	adc	r24, r24
 958:	06 94       	lsr	r0
 95a:	a9 f7       	brne	.-22     	; 0x946 <__stack+0x47>
 95c:	84 91       	lpm	r24, Z
 95e:	10 95       	com	r17
 960:	17 70       	andi	r17, 0x07	; 7
 962:	41 f0       	breq	.+16     	; 0x974 <__stack+0x75>
 964:	d6 95       	lsr	r29
 966:	c7 95       	ror	r28
 968:	57 95       	ror	r21
 96a:	47 95       	ror	r20
 96c:	f7 94       	ror	r15
 96e:	e7 94       	ror	r14
 970:	1a 95       	dec	r17
 972:	c1 f7       	brne	.-16     	; 0x964 <__stack+0x65>
 974:	e8 e6       	ldi	r30, 0x68	; 104
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	68 94       	set
 97a:	15 90       	lpm	r1, Z+
 97c:	15 91       	lpm	r17, Z+
 97e:	35 91       	lpm	r19, Z+
 980:	65 91       	lpm	r22, Z+
 982:	95 91       	lpm	r25, Z+
 984:	05 90       	lpm	r0, Z+
 986:	7f e2       	ldi	r23, 0x2F	; 47
 988:	73 95       	inc	r23
 98a:	e1 18       	sub	r14, r1
 98c:	f1 0a       	sbc	r15, r17
 98e:	43 0b       	sbc	r20, r19
 990:	56 0b       	sbc	r21, r22
 992:	c9 0b       	sbc	r28, r25
 994:	d0 09       	sbc	r29, r0
 996:	c0 f7       	brcc	.-16     	; 0x988 <__stack+0x89>
 998:	e1 0c       	add	r14, r1
 99a:	f1 1e       	adc	r15, r17
 99c:	43 1f       	adc	r20, r19
 99e:	56 1f       	adc	r21, r22
 9a0:	c9 1f       	adc	r28, r25
 9a2:	d0 1d       	adc	r29, r0
 9a4:	7e f4       	brtc	.+30     	; 0x9c4 <__stack+0xc5>
 9a6:	70 33       	cpi	r23, 0x30	; 48
 9a8:	11 f4       	brne	.+4      	; 0x9ae <__stack+0xaf>
 9aa:	8a 95       	dec	r24
 9ac:	e6 cf       	rjmp	.-52     	; 0x97a <__stack+0x7b>
 9ae:	e8 94       	clt
 9b0:	01 50       	subi	r16, 0x01	; 1
 9b2:	30 f0       	brcs	.+12     	; 0x9c0 <__stack+0xc1>
 9b4:	08 0f       	add	r16, r24
 9b6:	0a f4       	brpl	.+2      	; 0x9ba <__stack+0xbb>
 9b8:	00 27       	eor	r16, r16
 9ba:	02 17       	cp	r16, r18
 9bc:	08 f4       	brcc	.+2      	; 0x9c0 <__stack+0xc1>
 9be:	20 2f       	mov	r18, r16
 9c0:	23 95       	inc	r18
 9c2:	02 2f       	mov	r16, r18
 9c4:	7a 33       	cpi	r23, 0x3A	; 58
 9c6:	28 f0       	brcs	.+10     	; 0x9d2 <__stack+0xd3>
 9c8:	79 e3       	ldi	r23, 0x39	; 57
 9ca:	7d 93       	st	X+, r23
 9cc:	2a 95       	dec	r18
 9ce:	e9 f7       	brne	.-6      	; 0x9ca <__stack+0xcb>
 9d0:	10 c0       	rjmp	.+32     	; 0x9f2 <__stack+0xf3>
 9d2:	7d 93       	st	X+, r23
 9d4:	2a 95       	dec	r18
 9d6:	89 f6       	brne	.-94     	; 0x97a <__stack+0x7b>
 9d8:	06 94       	lsr	r0
 9da:	97 95       	ror	r25
 9dc:	67 95       	ror	r22
 9de:	37 95       	ror	r19
 9e0:	17 95       	ror	r17
 9e2:	17 94       	ror	r1
 9e4:	e1 18       	sub	r14, r1
 9e6:	f1 0a       	sbc	r15, r17
 9e8:	43 0b       	sbc	r20, r19
 9ea:	56 0b       	sbc	r21, r22
 9ec:	c9 0b       	sbc	r28, r25
 9ee:	d0 09       	sbc	r29, r0
 9f0:	98 f0       	brcs	.+38     	; 0xa18 <__stack+0x119>
 9f2:	23 95       	inc	r18
 9f4:	7e 91       	ld	r23, -X
 9f6:	73 95       	inc	r23
 9f8:	7a 33       	cpi	r23, 0x3A	; 58
 9fa:	08 f0       	brcs	.+2      	; 0x9fe <__stack+0xff>
 9fc:	70 e3       	ldi	r23, 0x30	; 48
 9fe:	7c 93       	st	X, r23
 a00:	20 13       	cpse	r18, r16
 a02:	b8 f7       	brcc	.-18     	; 0x9f2 <__stack+0xf3>
 a04:	7e 91       	ld	r23, -X
 a06:	70 61       	ori	r23, 0x10	; 16
 a08:	7d 93       	st	X+, r23
 a0a:	30 f0       	brcs	.+12     	; 0xa18 <__stack+0x119>
 a0c:	83 95       	inc	r24
 a0e:	71 e3       	ldi	r23, 0x31	; 49
 a10:	7d 93       	st	X+, r23
 a12:	70 e3       	ldi	r23, 0x30	; 48
 a14:	2a 95       	dec	r18
 a16:	e1 f7       	brne	.-8      	; 0xa10 <__stack+0x111>
 a18:	11 24       	eor	r1, r1
 a1a:	ef 90       	pop	r14
 a1c:	ff 90       	pop	r15
 a1e:	0f 91       	pop	r16
 a20:	1f 91       	pop	r17
 a22:	cf 91       	pop	r28
 a24:	df 91       	pop	r29
 a26:	99 27       	eor	r25, r25
 a28:	87 fd       	sbrc	r24, 7
 a2a:	90 95       	com	r25
 a2c:	08 95       	ret

00000a2e <__prologue_saves__>:
 a2e:	2f 92       	push	r2
 a30:	3f 92       	push	r3
 a32:	4f 92       	push	r4
 a34:	5f 92       	push	r5
 a36:	6f 92       	push	r6
 a38:	7f 92       	push	r7
 a3a:	8f 92       	push	r8
 a3c:	9f 92       	push	r9
 a3e:	af 92       	push	r10
 a40:	bf 92       	push	r11
 a42:	cf 92       	push	r12
 a44:	df 92       	push	r13
 a46:	ef 92       	push	r14
 a48:	ff 92       	push	r15
 a4a:	0f 93       	push	r16
 a4c:	1f 93       	push	r17
 a4e:	cf 93       	push	r28
 a50:	df 93       	push	r29
 a52:	cd b7       	in	r28, 0x3d	; 61
 a54:	de b7       	in	r29, 0x3e	; 62
 a56:	ca 1b       	sub	r28, r26
 a58:	db 0b       	sbc	r29, r27
 a5a:	0f b6       	in	r0, 0x3f	; 63
 a5c:	f8 94       	cli
 a5e:	de bf       	out	0x3e, r29	; 62
 a60:	0f be       	out	0x3f, r0	; 63
 a62:	cd bf       	out	0x3d, r28	; 61
 a64:	09 94       	ijmp

00000a66 <__epilogue_restores__>:
 a66:	2a 88       	ldd	r2, Y+18	; 0x12
 a68:	39 88       	ldd	r3, Y+17	; 0x11
 a6a:	48 88       	ldd	r4, Y+16	; 0x10
 a6c:	5f 84       	ldd	r5, Y+15	; 0x0f
 a6e:	6e 84       	ldd	r6, Y+14	; 0x0e
 a70:	7d 84       	ldd	r7, Y+13	; 0x0d
 a72:	8c 84       	ldd	r8, Y+12	; 0x0c
 a74:	9b 84       	ldd	r9, Y+11	; 0x0b
 a76:	aa 84       	ldd	r10, Y+10	; 0x0a
 a78:	b9 84       	ldd	r11, Y+9	; 0x09
 a7a:	c8 84       	ldd	r12, Y+8	; 0x08
 a7c:	df 80       	ldd	r13, Y+7	; 0x07
 a7e:	ee 80       	ldd	r14, Y+6	; 0x06
 a80:	fd 80       	ldd	r15, Y+5	; 0x05
 a82:	0c 81       	ldd	r16, Y+4	; 0x04
 a84:	1b 81       	ldd	r17, Y+3	; 0x03
 a86:	aa 81       	ldd	r26, Y+2	; 0x02
 a88:	b9 81       	ldd	r27, Y+1	; 0x01
 a8a:	ce 0f       	add	r28, r30
 a8c:	d1 1d       	adc	r29, r1
 a8e:	0f b6       	in	r0, 0x3f	; 63
 a90:	f8 94       	cli
 a92:	de bf       	out	0x3e, r29	; 62
 a94:	0f be       	out	0x3f, r0	; 63
 a96:	cd bf       	out	0x3d, r28	; 61
 a98:	ed 01       	movw	r28, r26
 a9a:	08 95       	ret

00000a9c <_exit>:
 a9c:	f8 94       	cli

00000a9e <__stop_program>:
 a9e:	ff cf       	rjmp	.-2      	; 0xa9e <__stop_program>
