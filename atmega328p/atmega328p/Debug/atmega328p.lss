
atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000334  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800112  00800112  000003da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001142  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bb  00000000  00000000  00001686  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000832  00000000  00000000  00002041  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  00002874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ca  00000000  00000000  00002aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090a  00000000  00000000  00002f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003874  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 40 01 	call	0x280	; 0x280 <main>
  9e:	0c 94 98 01 	jmp	0x330	; 0x330 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_i2c>:
#include <util/delay.h>
#include "i2c.h"

void init_i2c(void)
{
	TWSR = ((0 << TWPS1) & (0 << TWPS0)); //Prescaler = 1
  a6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0X14; //Define Bit rate SCL_frec=CPU_frec/(16+2(TWBR)x4^(prescaler))
  aa:	84 e1       	ldi	r24, 0x14	; 20
  ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
				//SCL_Frec=(16000000/(16+2(20)(4)))=74Khz
	TWCR = (1<<TWEN); //Activa la interfaz TWI
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b6:	08 95       	ret

000000b8 <start>:
}

void start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Genera condición de START
  b8:	84 ea       	ldi	r24, 0xA4	; 164
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
  be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c2:	88 23       	and	r24, r24
  c4:	e4 f7       	brge	.-8      	; 0xbe <start+0x6>
}
  c6:	08 95       	ret

000000c8 <stop>:

void stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //Genera condición de STOP
  c8:	84 e9       	ldi	r24, 0x94	; 148
  ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f e9       	ldi	r24, 0x9F	; 159
  d0:	9f e0       	ldi	r25, 0x0F	; 15
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <stop+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <stop+0x10>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <write_i2c>:
	_delay_ms(1);
}

void write_i2c(uint8_t data)
{
	TWDR = data; //Byte a escribir
  dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Escritura con reconocimiento (TWEA=1)
  e0:	84 ec       	ldi	r24, 0xC4	; 196
  e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
  e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ea:	88 23       	and	r24, r24
  ec:	e4 f7       	brge	.-8      	; 0xe6 <write_i2c+0xa>
}
  ee:	08 95       	ret

000000f0 <lcd_i2c_reset>:
  f0:	0e 94 5c 00 	call	0xb8	; 0xb8 <start>
  f4:	8e e4       	ldi	r24, 0x4E	; 78
  f6:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	89 ef       	ldi	r24, 0xF9	; 249
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <lcd_i2c_reset+0x16>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_i2c_reset+0x20>
 110:	00 00       	nop
 112:	84 e3       	ldi	r24, 0x34	; 52
 114:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 118:	80 e3       	ldi	r24, 0x30	; 48
 11a:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	9c e9       	ldi	r25, 0x9C	; 156
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_i2c_reset+0x32>
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_i2c_reset+0x38>
 128:	00 00       	nop
 12a:	84 e3       	ldi	r24, 0x34	; 52
 12c:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 130:	80 e3       	ldi	r24, 0x30	; 48
 132:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 136:	8f e9       	ldi	r24, 0x9F	; 159
 138:	9f e0       	ldi	r25, 0x0F	; 15
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_i2c_reset+0x4a>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_i2c_reset+0x50>
 140:	00 00       	nop
 142:	84 e3       	ldi	r24, 0x34	; 52
 144:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 14e:	8f e9       	ldi	r24, 0x9F	; 159
 150:	9f e0       	ldi	r25, 0x0F	; 15
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_i2c_reset+0x62>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_i2c_reset+0x68>
 158:	00 00       	nop
 15a:	84 e2       	ldi	r24, 0x24	; 36
 15c:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 160:	80 e2       	ldi	r24, 0x20	; 32
 162:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 166:	8f e9       	ldi	r24, 0x9F	; 159
 168:	9f e0       	ldi	r25, 0x0F	; 15
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_i2c_reset+0x7a>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_i2c_reset+0x80>
 170:	00 00       	nop
 172:	0e 94 64 00 	call	0xc8	; 0xc8 <stop>
 176:	08 95       	ret

00000178 <lcd_i2c_cmd>:
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	c8 2f       	mov	r28, r24
 17e:	0e 94 5c 00 	call	0xb8	; 0xb8 <start>
 182:	8e e4       	ldi	r24, 0x4E	; 78
 184:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 188:	dc 2f       	mov	r29, r28
 18a:	d0 7f       	andi	r29, 0xF0	; 240
 18c:	8d 2f       	mov	r24, r29
 18e:	8c 60       	ori	r24, 0x0C	; 12
 190:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 194:	8d 2f       	mov	r24, r29
 196:	88 60       	ori	r24, 0x08	; 8
 198:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	c8 9f       	mul	r28, r24
 1a0:	e0 01       	movw	r28, r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8c 2f       	mov	r24, r28
 1a6:	8c 60       	ori	r24, 0x0C	; 12
 1a8:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 1ac:	8c 2f       	mov	r24, r28
 1ae:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 1b2:	0e 94 64 00 	call	0xc8	; 0xc8 <stop>
 1b6:	8f e3       	ldi	r24, 0x3F	; 63
 1b8:	9f e1       	ldi	r25, 0x1F	; 31
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_i2c_cmd+0x42>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_i2c_cmd+0x48>
 1c0:	00 00       	nop
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	9f e1       	ldi	r25, 0x1F	; 31
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_i2c_cmd+0x4e>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_i2c_cmd+0x54>
 1cc:	00 00       	nop
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <lcd_i2c_init>:
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <init_i2c>
 1d8:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_i2c_reset>
 1dc:	8c e2       	ldi	r24, 0x2C	; 44
 1de:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_i2c_cmd>
 1e2:	8c e0       	ldi	r24, 0x0C	; 12
 1e4:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_i2c_cmd>
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_i2c_cmd>
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_i2c_cmd>
 1f4:	08 95       	ret

000001f6 <lcd_i2c_data>:
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	c8 2f       	mov	r28, r24
 1fc:	0e 94 5c 00 	call	0xb8	; 0xb8 <start>
 200:	8e e4       	ldi	r24, 0x4E	; 78
 202:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 206:	dc 2f       	mov	r29, r28
 208:	d0 7f       	andi	r29, 0xF0	; 240
 20a:	8d 2f       	mov	r24, r29
 20c:	8d 60       	ori	r24, 0x0D	; 13
 20e:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 212:	8d 2f       	mov	r24, r29
 214:	89 60       	ori	r24, 0x09	; 9
 216:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 21a:	80 e1       	ldi	r24, 0x10	; 16
 21c:	c8 9f       	mul	r28, r24
 21e:	e0 01       	movw	r28, r0
 220:	11 24       	eor	r1, r1
 222:	8c 2f       	mov	r24, r28
 224:	8d 60       	ori	r24, 0x0D	; 13
 226:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 22a:	8c 2f       	mov	r24, r28
 22c:	89 60       	ori	r24, 0x09	; 9
 22e:	0e 94 6e 00 	call	0xdc	; 0xdc <write_i2c>
 232:	0e 94 64 00 	call	0xc8	; 0xc8 <stop>
 236:	8f e3       	ldi	r24, 0x3F	; 63
 238:	9f e1       	ldi	r25, 0x1F	; 31
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_i2c_data+0x44>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_i2c_data+0x4a>
 240:	00 00       	nop
 242:	8f e3       	ldi	r24, 0x3F	; 63
 244:	9f e1       	ldi	r25, 0x1F	; 31
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_i2c_data+0x50>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <lcd_i2c_data+0x56>
 24c:	00 00       	nop
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <lcd_i2c_write_string>:
*	Despliega una cadena de caracteres
*	Entrada: Cadena de caracteres entre comillas (p.e. "Hola LCD..")
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_write_string(char *a)
{
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	8c 01       	movw	r16, r24
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	d0 e0       	ldi	r29, 0x00	; 0
 262:	03 c0       	rjmp	.+6      	; 0x26a <lcd_i2c_write_string+0x16>
	lcd_i2c_data(a[i]);
 264:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_i2c_data>
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_write_string(char *a)
{
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 268:	21 96       	adiw	r28, 0x01	; 1
 26a:	f8 01       	movw	r30, r16
 26c:	ec 0f       	add	r30, r28
 26e:	fd 1f       	adc	r31, r29
 270:	80 81       	ld	r24, Z
 272:	81 11       	cpse	r24, r1
 274:	f7 cf       	rjmp	.-18     	; 0x264 <lcd_i2c_write_string+0x10>
	lcd_i2c_data(a[i]);
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	08 95       	ret

00000280 <main>:
#include "usart.h"
#include "lcd_i2c.h"

int main(void)
{
    init_usart(16);
 280:	80 e1       	ldi	r24, 0x10	; 16
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 81 01 	call	0x302	; 0x302 <init_usart>
	lcd_i2c_init();
 288:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_i2c_init>
	lcd_i2c_write_string("Todos reprobados");
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_i2c_write_string>
 294:	ff cf       	rjmp	.-2      	; 0x294 <main+0x14>

00000296 <usart_transmit>:
  while (i < 64)
  {
	  if (s[i] == '\0') break;
	  usart_transmit(s[i++]);
  }
}
 296:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 29a:	95 ff       	sbrs	r25, 5
 29c:	fc cf       	rjmp	.-8      	; 0x296 <usart_transmit>
 29e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2a2:	08 95       	ret

000002a4 <__vector_18>:
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
 2c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2ca:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 2ce:	80 e4       	ldi	r24, 0x40	; 64
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 4b 01 	call	0x296	; 0x296 <usart_transmit>
 2d6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 4b 01 	call	0x296	; 0x296 <usart_transmit>
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	7f 91       	pop	r23
 2ee:	6f 91       	pop	r22
 2f0:	5f 91       	pop	r21
 2f2:	4f 91       	pop	r20
 2f4:	3f 91       	pop	r19
 2f6:	2f 91       	pop	r18
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <init_usart>:
* Entrada: valor de UBRR de las tablas(datasheet)de BAUDRATE
*/
void init_usart(unsigned int baudrate)
{
	//Escoge modo de reloj: UMSEL=0 asíncrono, UMSEL=1 síncrono
	UCSR0C &= (~(1<<UMSEL00) & ~(1<<UMSEL01)); // bit UMSEL = 0 asíncrono
 302:	e2 ec       	ldi	r30, 0xC2	; 194
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	20 81       	ld	r18, Z
 308:	2f 73       	andi	r18, 0x3F	; 63
 30a:	20 83       	st	Z, r18
	
	//En modo asíncrono escoge la velocidad: U2X=0 normal, U2X=1 doble
	UCSR0A = (1<<U2X0); // bit U2X = 1 doble
 30c:	22 e0       	ldi	r18, 0x02	; 2
 30e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Baudrate ejemplo: fosc = 16 Mhz, U2Xn= 1, BaudRate = 9600, entonces UBRR= 207
	//Ver DataSheet pag.153
	UBRR0H = (unsigned char) (baudrate>>8); // Escribe (MSB) en la parte alta del registro
 312:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) (baudrate); //Escribe (LSB) el valor en la parte baja
 316:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Tamaño de los datos
	UCSR0C = ((1<<UCSZ00) | (1<<UCSZ01)); //Selecciona registro,8 bits para longitud de datos
 31a:	86 e0       	ldi	r24, 0x06	; 6
 31c:	80 83       	st	Z, r24
	
	//Habilitar el transmisor y receptor
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 31e:	e1 ec       	ldi	r30, 0xC1	; 193
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	88 e1       	ldi	r24, 0x18	; 24
 324:	80 83       	st	Z, r24
	
	//Habilita 2 bits de paro
	//UCSRC = (1<<USBS);
	
	sei(); //Activa interrupciones generales
 326:	78 94       	sei
	//Para activar/desactivar las interrupcines, sólo quitar/poner el símbolo de comentarios
	UCSR0B |= (1<<RXCIE0);	//Activa interrupciones de "recepción completada" (RXCIE=1)
 328:	80 81       	ld	r24, Z
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	80 83       	st	Z, r24
 32e:	08 95       	ret

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
